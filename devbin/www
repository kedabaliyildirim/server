#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config({
  path: "/home/silverdrop/Documents/Javascript/FormProject/server/.env",
});

const fs = require("fs");
const app = require("../app");
const debug = require("debug")("js-ex:server");
const https = require("https");
const socketApi = require("../helpers/socket");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
const corsList = require("../helpers/CORSHelper.js");
app.set("port", port);
/**
 * Create HTTP server.
 */

const server = https.createServer(
  {
    key: fs.readFileSync(
      "/home/silverdrop/Documents/Javascript/FormProject/server/localhost-key.pem",
      "utf8"
    ),
    cert: fs.readFileSync(
      "/home/silverdrop/Documents/Javascript/FormProject/server/localhost.pem",
      "utf8"
    ),
  },
  app
);
socketApi.io.listen(server, {
  cors: corsList,
  sameSite: "none",
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
